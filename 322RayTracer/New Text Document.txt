int main(int argc, char **argv) {

	// init GLUT and create Window
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(320,320);
	glutCreateWindow("Lighthouse3D- GLUT Tutorial");

C:\Users\james\Documents\GitHub\332RayTracer\freeglut\include

#include <GL\glut.h>


	Normal = glm::vec3(0, 0, 1);
	//std::cout << Normal.x << " "<< Normal.y << " " << Normal.z << std::endl;
	glm::vec3 p;
	float denominator = glm::dot(RDirection, Normal);
	if (abs(denominator) > 0.000001) {
		float t = glm::dot((a - ROrigin), Normal) / denominator;
		if (t >= 0) {
			p = ROrigin + t*RDirection;
			float w = glm::dot(Normal, glm::cross((b - a), (c - a)));
			float u = glm::dot(Normal, glm::cross((b - p), (c - p)));
			float v = glm::dot(Normal, glm::cross((c - p), (a - p)));

			float baryx = u / w;
			float baryy = v / w;
			float baryz = 1.0 - baryx - baryy;

			if (baryx < 0 || baryx > 1) {
				return -1;
			}
			if (baryy < 0 || (baryx + baryy)>1)
				return -1;
			else {
				std::cout << "DRAWING" << std::endl;
				return t;
			}
				
			//std::cout << p.x << " " << p.y << " " << p.z << std::endl;
			
		}
	}
	return -1;



//Calculating Barycentric coords
			//http://gamedev.stackexchange.com/questions/23743/whats-the-most-efficient-way-to-find-barycentric-coordinates
			glm::vec3 v0 = b - a, v1 = c - a, v2 = p - a;
			float d00 = glm::dot(v0, v0);
			float d01 = glm::dot(v0, v1);
			float d11 = glm::dot(v1, v1);
			float d20 = glm::dot(v2, v0);
			float d21 = glm::dot(v2, v1);
			float denom = d00 * d11 - d01 * d01;
			float v = (d11 * d20 - d01 * d21) / denom;
			float w = (d00 * d21 - d01 * d20) / denom;
			float u = 1.0f - v - w;




//Calculate BaryCentric coords
			glm::vec3 e1 = b - a;
			glm::vec3 e2 = c - a;
			float u = (glm::dot((ROrigin - a), (glm::cross(RDirection, e2)))) / (glm::dot(e1, (glm::cross(RDirection, e2))));
			float v = (glm::dot(RDirection, (glm::cross(ROrigin - a, e1)))) / (glm::dot(e1, glm::cross(RDirection, e2)));